#!/usr/bin/env -S scala @./atFile

import vastblue.pallet.*

lazy val (psep, cp) = {
  val ps = sys.props("path.separator")
  val clp = sys.props("java.class.path").split(ps)
  (ps, clp)
}
lazy val homedir = sys.props("user.home").replace('\\', '/')
lazy val scriptName = sys.props("script.path").posx.replaceAll(".*/", "")

def usage(msg: String=""): Nothing = {
  _usage(msg, Seq("[<options>]",
    "-d           ; list classpath directories",
    "-j           ; list classpath jars",
    "-v           ; verbose",
  ))
}

// analyze classpath, selectively showing dirs, jars and bad entries
// usage: ${0##*/} [-dirs] [-jars]"
def main(args: Array[String]): Unit =
  var verbose = false
  var (dirs, jars) = (true, false)
  args.indices.foreach { i =>
    args(i) match {
    case "-v" => verbose = true
    case "-d" | "-dirs" => dirs = !dirs
    case "-j" | "-jars" => jars = !jars
    case arg =>
      usage(s"unrecognized arg [$arg]")
    }
  }
  if (!dirs && !jars && !verbose) {
    usage()
  }
  printf("scriptName[%s]\n", scriptName)
  if (verbose) {
    printf("psep[%s]\n", psep)
  }
  for (e <- cp) {
    val fname = if (e.startsWith("~")) {
      e.replaceFirst("~", homedir)
    } else {
      e
    }
    if (verbose) {
      printf("%s\n", fname.posx)
    }
    val p = java.nio.file.Paths.get(fname)
    val isdir = p.toFile.isDirectory
    val isfil = p.toFile.isFile
    (isfil, isdir) match {
    case (true, false) =>
      if (jars) printf("jar: %s\n", p.posx)
    case (false, true) =>
      if (dirs) printf("dir: %s\n", p.posx)
    case _ =>
      printf("%5s: %5s: %s\n", isdir, isfil, p.posx)
    }
  }
